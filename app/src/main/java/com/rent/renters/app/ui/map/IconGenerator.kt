package com.rent.renters.app.ui.map


import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Rect
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.core.content.ContextCompat
import com.rent.renters.R


/**
 * IconGenerator generates icons that contain text (or custom content) within an info
 * window-like shape.
 *
 *
 * The icon [Bitmap]s generated by the factory should be used in conjunction with a [ ].
 *
 *
 * This class is not thread safe.
 */
class IconGenerator
/**
 * Creates a new IconGenerator with the default style.
 */
(private val mContext: Context) {

    private val mContainer: ViewGroup
    private val mRotationLayout: RotationLayout
    private var mTextView: TextView? = null
    private var mContentView: View? = null

    private var mRotation: Int = 0

    private val mAnchorU = 0.5f
    private val mAnchorV = 1f
    private val mBackground: BubbleDrawable


    /**
     * @return u coordinate of the anchor, with rotation applied.
     */
    val anchorU: Float
        get() = rotateAnchor(mAnchorU, mAnchorV)

    /**
     * @return v coordinate of the anchor, with rotation applied.
     */
    val anchorV: Float
        get() = rotateAnchor(mAnchorV, mAnchorU)

    init {
        mBackground = BubbleDrawable(mContext.resources)
        mContainer = LayoutInflater.from(mContext).inflate(R.layout.map_marker_bubble_view, null) as ViewGroup
        mRotationLayout = mContainer.getChildAt(0) as RotationLayout
        mTextView = mRotationLayout.findViewById<View>(R.id.amu_text) as TextView
        mContentView = mTextView
        //setStyle(STYLE_DEFAULT)
    }

    /**
     * Sets the text content, then creates an icon with the current style.
     *
     * @param text the text content to display inside the icon.
     */
    fun makeIcon(text: CharSequence): Bitmap {
        if (mTextView != null) {
            mTextView!!.text = text
        }

        return makeIcon()
    }



    /**
     * Creates an icon with the current content and style.
     *
     *
     * This method is useful if a custom view has previously been set, or if text content is not
     * applicable.
     */
    fun makeIcon(): Bitmap {
        val measureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        mContainer.measure(measureSpec, measureSpec)

        var measuredWidth = mContainer.measuredWidth
        var measuredHeight = mContainer.measuredHeight

        mContainer.layout(0, 0, measuredWidth, measuredHeight)

        if (mRotation == 1 || mRotation == 3) {
            measuredHeight = mContainer.measuredWidth
            measuredWidth = mContainer.measuredHeight
        }

        val r = Bitmap.createBitmap(measuredWidth, measuredHeight, Bitmap.Config.ARGB_8888)
        r.eraseColor(Color.TRANSPARENT)

        val canvas = Canvas(r)

        when (mRotation) {
            0 -> {
            }
            1 -> {
                canvas.translate(measuredWidth.toFloat(), 0f)
                canvas.rotate(90f)
            }
            2 -> canvas.rotate(180f, (measuredWidth / 2).toFloat(), (measuredHeight / 2).toFloat())
            3 -> {
                canvas.translate(0f, measuredHeight.toFloat())
                canvas.rotate(270f)
            }
        }// do nothing
        mContainer.draw(canvas)
        return r
    }

    /**
     * Sets the child view for the icon.
     *
     *
     * If the view contains a [TextView] with the id "text", operations such as [ ][.setTextAppearance] and [.makeIcon] will operate upon that [TextView].
     */
    fun setContentView(contentView: View) {
        mRotationLayout.removeAllViews()
        mRotationLayout.addView(contentView)
        mContentView = contentView
        val view = mRotationLayout.findViewById<View>(R.id.amu_text)
        mTextView = if (view is TextView) view else null
    }

    /**
     * Rotates the contents of the icon.
     *
     * @param degrees the amount the contents should be rotated, as a multiple of 90 degrees.
     */
    fun setContentRotation(degrees: Int) {
        mRotationLayout.setViewRotation(degrees)
    }

    /**
     * Rotates the icon.
     *
     * @param degrees the amount the icon should be rotated, as a multiple of 90 degrees.
     */
    fun setRotation(degrees: Int) {
        mRotation = (degrees + 360) % 360 / 90
    }

    /**
     * Rotates the anchor around (u, v) = (0, 0).
     */
    private fun rotateAnchor(u: Float, v: Float): Float {
        when (mRotation) {
            0 -> return u
            1 -> return 1 - v
            2 -> return 1 - u
            3 -> return v
        }
        throw IllegalStateException()
    }

    /**
     * Sets the text color, size, style, hint color, and highlight color from the specified
     * `TextAppearance` resource.
     *
     * @param resid the identifier of the resource.
     */
    fun setTextAppearance(context: Context, resid: Int) {
        if (mTextView != null) {
            mTextView!!.setTextAppearance(context, resid)
        }
    }

    /**
     * Sets the text color, size, style, hint color, and highlight color from the specified
     * `TextAppearance` resource.
     *
     * @param resid the identifier of the resource.
     */
    fun setTextAppearance(resid: Int) {
        setTextAppearance(mContext, resid)
    }

    /**
     * Sets the style of the icon. The style consists of a background and text appearance.
     */
    fun setStyle(style: Int,context: Context) {
        setColor(getStyleColor(style,context))
        setTextAppearance(mContext, getTextStyle(style))
    }

    /**
     * Sets the background to the default, with a given color tint.
     *
     * @param color the color for the background tint.
     */
    fun setColor(color: Int) {
        mBackground.setColor(color)
        setBackground(mBackground)
    }

    /**
     * Set the background to a given Drawable, or remove the background.
     *
     * @param background the Drawable to use as the background, or null to remove the background.
     */
    // View#setBackgroundDrawable is compatible with pre-API level 16 (Jelly Bean).
    fun setBackground(background: Drawable?) {
        mContainer.setBackgroundDrawable(background)

        // Force setting of padding.
        // setBackgroundDrawable does not call setPadding if the background has 0 padding.
        if (background != null) {
            val rect = Rect()
            background.getPadding(rect)
            mContainer.setPadding(rect.left, rect.top, rect.right, rect.bottom)
        } else {
            mContainer.setPadding(0, 0, 0, 0)
        }
    }

    /**
     * Sets the padding of the content view. The default padding of the content view (i.e. text
     * view) is 5dp top/bottom and 10dp left/right.
     *
     * @param left   the left padding in pixels.
     * @param top    the top padding in pixels.
     * @param right  the right padding in pixels.
     * @param bottom the bottom padding in pixels.
     */
    fun setContentPadding(left: Int, top: Int, right: Int, bottom: Int) {
        mContentView!!.setPadding(left, top, right, bottom)
    }

    companion object {

        val STYLE_DEFAULT = 1
        val STYLE_WHITE = 2
        val STYLE_RED = 3
        val STYLE_BLUE = 4
        val STYLE_GREEN = 5
        val STYLE_PURPLE = 6
        val STYLE_ORANGE = 7

        private fun getStyleColor(style: Int,context: Context): Int {
            when (style) {
                STYLE_DEFAULT, STYLE_WHITE -> return -0x1
                STYLE_RED -> return -0x340000
                STYLE_BLUE -> return ContextCompat.getColor(context,R.color.app_color)
                STYLE_GREEN -> return -0x996700
                STYLE_PURPLE -> return -0x66cc34
                STYLE_ORANGE -> return -0x7800
                else -> return -0x1
            }
        }

        private fun getTextStyle(style: Int): Int {
            when (style) {
                STYLE_DEFAULT, STYLE_WHITE -> return R.style.amu_Bubble_TextAppearance_Dark
                STYLE_RED, STYLE_BLUE, STYLE_GREEN, STYLE_PURPLE, STYLE_ORANGE -> return R.style.amu_Bubble_TextAppearance_Light
                else -> return R.style.amu_Bubble_TextAppearance_Dark
            }
        }
    }
}
